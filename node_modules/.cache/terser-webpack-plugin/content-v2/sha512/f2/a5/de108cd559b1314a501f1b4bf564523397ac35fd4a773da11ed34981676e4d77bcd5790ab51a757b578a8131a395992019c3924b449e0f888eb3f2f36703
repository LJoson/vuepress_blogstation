{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{411:function(t,s,n){\"use strict\";n.r(s);var a=n(2),i=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"p\"),n(\"div\",{staticClass:\"table-of-contents\"},[n(\"ul\",[n(\"li\",[n(\"a\",{attrs:{href:\"#二值化（thresholding）\"}},[t._v(\"二值化（Thresholding）\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#大津二值化算法（otsu-s-method）\"}},[t._v(\"大津二值化算法（Otsu's Method）\")])]),n(\"li\",[n(\"a\",{attrs:{href:\"#kittle算法\"}},[t._v(\"Kittle算法\")])])])]),n(\"p\"),t._v(\" \"),n(\"h1\",{attrs:{id:\"图像二值化\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#图像二值化\"}},[t._v(\"#\")]),t._v(\" 图像二值化\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"二值化（thresholding）\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二值化（thresholding）\"}},[t._v(\"#\")]),t._v(\" 二值化（Thresholding）\")]),t._v(\" \"),n(\"p\",[t._v(\"二值化是将图像使用黑和白两种值表示的方法，就是将图像上的像素点的灰度值设置为0或255，也就是将整个图像呈现出明显的黑白效果的过程。\\n（其中0是黑，255是白）。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-c++ line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v('\\n#include <opencv2/core.hpp>\\n#include <opencv2/highgui.hpp>\\n#include <iostream>\\n\\nint main(int argc, const char* argv[]){\\n    cv::Mat img = cv::imread(\"imagepath\", cv::IMREAD_COLOR);\\n    int height = img.rows;\\n    int width  = img.cols;\\n\\n    int th = 128;//阈值，Threshold value\\n\\n    cv::Mat out = cv::Mat::zeros(height, width, CV_8UC1);\\n    //灰度化\\n    for (int j=0; j<height; j++){\\n    for (int i=0; i<width; i++){\\n      uchar val = (int)((float)img.at<cv::Vec3b>(j,i)[0] * 0.0722 +\\t\\\\\\n\\t\\t\\t(float)img.at<cv::Vec3b>(j,i)[1] * 0.7152 +\\t\\\\\\n\\t\\t\\t(float)img.at<cv::Vec3b>(j,i)[2] * 0.2126);\\n      if (val < th)\\n\\t  {\\n\\t\\t  val = 0;\\n      } \\n\\t  else \\n\\t  {\\n\\t\\t  val = 255;\\n      }\\n      out.at<uchar>(j,i) = val;//通过跟阈值比较进行二值化\\n    }\\n  }\\n  \\n  //cv::imwrite(\"out.jpg\", out);\\n  cv::imshow(\"answer\", out);\\n  cv::waitKey(0);\\n  cv::destroyAllWindows();\\n\\n  return 0;\\n\\n\\n\\n}\\n\\n')])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"42\")]),n(\"br\")])]),n(\"div\",{staticClass:\"custom-block tip\"},[n(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"阈值\")]),t._v(\" \"),n(\"p\",[t._v(\"RGB三彩图需要先将图片灰度化，再对图像像素设置一个阈值进行二值化操作。\"),n(\"br\"),t._v(\"\\n阈值，可以看作一个分界指，两边的像素（大于阈值或者小于阈值）赋值是0或者255.\"),n(\"br\")])]),t._v(\" \"),n(\"p\",[t._v(\"但是图片二值化过程中人工确定阈值往往效果不好。于是有了otsu,大津法二值化提出。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"大津二值化算法（otsu-s-method）\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#大津二值化算法（otsu-s-method）\"}},[t._v(\"#\")]),t._v(\" 大津二值化算法（Otsu's Method）\")]),t._v(\" \"),n(\"p\",[t._v(\"大津法（OTSU）是一种图像灰度自适应的阈值分割算法，是1979年由日本学者大津提出，并由他的名字命名的。大津法按照图像上灰度值的分布，将图像分成背景和前景两部分看待，前景就是我们要按照阈值分割出来的部分。背景和前景的分界值就是我们要求出的阈值。遍历不同的阈值，计算不同阈值下对应的背景和前景之间的类内方差，当类内方差取得极大值时，此时对应的阈值就是大津法（OTSU算法）所求的阈值。\\n\"),n(\"a\",{attrs:{href:\"https://blog.csdn.net/dcrmg/article/details/52216622\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"来源\"),n(\"OutboundLink\")],1)]),t._v(\" \"),n(\"div\",{staticClass:\"custom-block tip\"},[n(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"算法描述\")]),t._v(\" \"),n(\"p\",[t._v(\"对于图像I(x,y)，前景(即目标，白色部分)和背景的分割阈值记作T，属于前景（大于阈值）的像素点数占整幅图像的比例记为ω0，其平均灰度μ0；\"),n(\"br\"),t._v(\"\\n背景像素（小于阈值）点数占整幅图像的比例为ω1，其平均灰度为μ1。图像的总平均灰度记为μ1，类间方差记为g。\"),n(\"br\")]),t._v(\" \"),n(\"p\",[t._v(\"假设图像的背景较暗，并且图像的大小为M×N，图像中像素的灰度值大于阈值T的像素个数记作N0，像素灰度小于阈值T的像素个数记作N1，\"),n(\"br\")]),t._v(\" \"),n(\"p\",[t._v(\"则有：\"),n(\"br\"),t._v(\"\\nω0=N0/ M×N    (1)  \"),n(\"br\"),t._v(\"\\nω1=N1/ M×N    (2）\"),n(\"br\"),t._v(\"\\nN0+N1=M×N    (3)    \"),n(\"br\"),t._v(\"\\nω0+ω1=1　　　 (4)\"),n(\"br\"),t._v(\"\\nμ=ω0\"),n(\"em\",[t._v(\"μ0+ω1\")]),t._v(\"μ1 (5)\"),n(\"br\"),t._v(\"\\ng=ω0(μ0-μ)^2+ω1(μ1-μ)^2 (6)\"),n(\"br\")]),t._v(\" \"),n(\"p\",[t._v(\"将式(5)代入式(6),得到等价公式:\"),n(\"br\"),t._v(\"\\ng=ω0ω1(μ0-μ1)^2   (7)　\"),n(\"br\"),t._v(\"\\n这个就是类间方差的公式表述,采用遍历的方法得到使类间方差g最大的阈值T,即为所求。\")])]),t._v(\" \"),n(\"p\",[t._v(\"实现代码\"),n(\"br\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-c++ line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v('#include <opencv2/core.hpp>\\n#include <opencv2/highgui.hpp>\\n#include <iostream>\\n#include <math.h>\\n\\nint main(int argc, const char* argv[]) {\\n\\tcv::Mat img = cv::imread(\"imagepath\", cv::IMREAD_COLOR);\\n\\n\\tint height = img.rows;\\n\\tint width = img.cols;\\n\\n\\tcv::Mat out = cv::Mat::zeros(height, width, CV_8UC1);\\n\\n\\t// gray灰度化\\n\\tint val = 0;\\n\\tfor (int j = 0; j < height; j++) {\\n\\t\\tfor (int i = 0; i < width; i++) {\\n\\t\\t\\tval = (int)((float)img.at<cv::Vec3b>(j, i)[0] * 0.0722 + \\\\\\n\\t\\t\\t\\t(float)img.at<cv::Vec3b>(j, i)[1] * 0.7152 + \\\\\\n\\t\\t\\t\\t(float)img.at<cv::Vec3b>(j, i)[2] * 0.2126);\\n\\t\\t\\tout.at<uchar>(j, i) = (uchar)val;\\n\\t\\t}\\n\\t}\\n\\n\\t// determine threshold\\n\\tdouble w0 = 0, w1 = 0;\\n\\tdouble N = 0, N1 = 0;\\n\\tdouble max_g = 0, g = 0;\\n\\tint th = 0;\\n\\n\\tfor (int T = 0; T < 255; T++)//遍历求阈值\\n\\t{\\n\\t\\tw0 = 0;\\n\\t\\tw1 = 0;\\n\\t\\tN = 0;\\n\\t\\tN1 = 0;\\n\\t\\tfor (int j = 0; j < height; j++)\\n\\t\\t{\\n\\t\\t\\tfor (int i = 0; i < width; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tval = (int)(out.at<uchar>(j, i));\\n\\t\\t\\t\\tif (val > T) {\\n\\t\\t\\t\\t\\tw0++;\\n\\t\\t\\t\\t\\tN += val;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tw1++;\\n\\t\\t\\t\\t\\tN1 += val;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tN /= w0;//前景平均灰度\\n\\t\\tN1 /= w1;//背景平均灰度\\n\\t\\tw0 /= (height * width);//比例\\n\\t\\tw1 /= (height * width);\\n\\t\\tg = w0 * w1 * pow((N - N1), 2);//类间方差\\n\\n\\t\\tif (g > max_g) { //判断最大类间方差\\n\\t\\t\\tmax_g = g;\\n\\t\\t\\tth = T;\\n\\t\\t}\\n\\n\\t}\\n\\n\\t// binalization二值化\\n\\tfor (int j = 0; j < height; j++)\\n\\t{\\n\\t\\tfor (int i = 0; i < width; i++)\\n\\t\\t{\\n\\t\\t\\tval = (int)(out.at<uchar>(j, i));\\n\\t\\t\\tif (val < th)\\n\\t\\t\\t{\\n\\t\\t\\t\\tval = 0;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tval = 255;\\n\\t\\t\\t}\\n\\t\\t\\tout.at<uchar>(j, i) = (uchar)val;\\n\\t\\t}\\n\\t}\\n\\n\\tstd::cout << \"threshold >> \" << th << std::endl;\\n\\n\\t//cv::imwrite(\"out.jpg\", out);\\n\\tcv::imshow(\"answer\", out);\\n\\tcv::waitKey(0);\\n\\tcv::destroyAllWindows();\\n\\n\\treturn 0;\\n\\n}\\n')])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"42\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"43\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"44\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"45\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"46\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"47\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"48\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"49\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"50\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"51\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"52\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"53\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"54\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"55\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"56\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"57\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"58\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"59\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"60\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"61\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"62\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"63\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"64\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"65\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"66\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"67\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"68\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"69\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"70\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"71\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"72\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"73\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"74\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"75\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"76\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"77\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"78\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"79\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"80\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"81\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"82\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"83\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"84\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"85\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"86\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"87\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"88\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"89\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"90\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"91\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"92\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"kittle算法\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#kittle算法\"}},[t._v(\"#\")]),t._v(\" Kittle算法\")]),t._v(\" \"),n(\"p\",[t._v(\"Kittler算法与Otsu方法效果接近，但速度更快，更适宜应用于像素质量较高的图像中。\"),n(\"br\"),t._v(\"\\n它的中心思想是，计算整幅图像的梯度灰度的平均值，以此平均值做为阈值。\")]),t._v(\" \"),n(\"div\",{staticClass:\"custom-block tip\"},[n(\"p\",{staticClass:\"custom-block-title\"},[t._v(\"图像梯度\")]),t._v(\" \"),n(\"p\",[t._v(\"在微积分中，一维函数的一阶微分的基本定义是这样的：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"/img/algorithm/kittle/1.png\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"而图像是一个二维函数f(x,y)，其微分当然就是偏微分。因此有：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"/img/algorithm/kittle/2.png\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"图像是一个离散的二维函数，ϵ不能无限小，我们的图像是按照像素来离散的，最小的ϵ就是0像素。因此，上面的图像微分又变成了如下的形式（ϵ=1）：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"/img/algorithm/kittle/3.png\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"这分别是图像在(x, y)点处x方向和y方向上的梯度，从上面的表达式可以看出来，图像的梯度相当于2个相邻像素之间的差值.\"),n(\"br\"),t._v(\"\\n我们先考虑下x方向，选取某个像素，假设其像素值是100，沿x方向的相邻像素分别是90,90,90，则根据上面的计算其x方向梯度分别是10,0,0，如图：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"/img/algorithm/kittle/grad.jpg\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"我们看到，相加后的新图像，原图像像素点100与90亮度只相差10，现在是110与90，亮度相差20了，对比度显然增强了，尤其是图像中物体的轮廓和边缘，与背景大大加强了区别，这就是用图像梯度来增强图像的原理。y方向同理,而x和y结合可以用如下式子表示在一起：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"/img/algorithm/kittle/5.png\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"由于计算量比较大，于是一般用绝对值来近似平方和平方根的操作，来降低计算量：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"/img/algorithm/kittle/4.png\",alt:\"\"}})])]),t._v(\" \"),n(\"p\",[t._v(\"代码：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language-c++ line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v('/*该代码未必合理，主要是在梯度灰度平均值的计算原理上有偏差*/\\n#include <opencv2/core.hpp>\\n#include <opencv2/highgui.hpp>\\n#include <iostream>\\n#include <math.h>\\n\\nint main(int argc, const char* argv[]) {\\n\\tcv::Mat img = cv::imread(\"imori.jpg\", cv::IMREAD_COLOR);\\n\\n\\tint height = img.rows;\\n\\tint width = img.cols;\\n\\n\\tcv::Mat out = cv::Mat::zeros(height, width, CV_8UC1);\\n\\tint tmp = 0;\\n\\t// gray\\n\\tint val = 0;\\n\\tfor (int j = 0; j < height; j++) {\\n\\t\\tfor (int i = 0; i < width; i++) {\\n\\t\\t\\tval = (int)((float)img.at<cv::Vec3b>(j, i)[0] * 0.0722 + \\\\\\n\\t\\t\\t\\t(float)img.at<cv::Vec3b>(j, i)[1] * 0.7152 + \\\\\\n\\t\\t\\t\\t(float)img.at<cv::Vec3b>(j, i)[2] * 0.2126);\\n\\t\\t\\tout.at<uchar>(j, i) = (uchar)val;\\n\\t\\t\\ttmp += val;\\n\\t\\t}\\n\\t}\\n\\tdouble grad = 0.0;\\n//梯度灰度计算\\n\\tfor (int ii = 0; ii < height-1; ii++)\\n\\t{\\n\\t\\tfor (int jj = 0; jj < width - 1; jj++) \\n\\t\\t{\\n\\t\\t\\t\\n\\t\\t\\tdouble dx = out.at<uchar>(ii, jj + 1) - out.at<uchar>(ii, jj);\\n\\t\\t\\tdouble dy = out.at<uchar>(ii+ 1, jj) - out.at<uchar>(ii, jj);\\n\\t\\t\\t//double ds = std::sqrt((dx*dx + dy * dy) / 2);//求法有异议，看到部分资料没有除以二，有的部分有除以二\\n\\t\\t\\tdouble ds = abs(dx) + abs(dy);\\n\\t\\t\\tgrad += ds;\\n\\t\\t}\\n\\n\\t}\\n\\tdouble imageAvG = grad + tmp;\\n\\tint th = imageAvG / (height*width);\\n\\t//二值化\\n\\tfor (int j = 0; j < height; j++)\\n\\t{\\n\\t\\tfor (int i = 0; i < width; i++)\\n\\t\\t{\\n\\t\\t\\tval = (int)(out.at<uchar>(j, i));\\n\\t\\t\\tif (val < th)\\n\\t\\t\\t{\\n\\t\\t\\t\\tval = 0;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tval = 255;\\n\\t\\t\\t}\\n\\t\\t\\tout.at<uchar>(j, i) = (uchar)val;\\n\\t\\t}\\n\\t}\\n\\n\\tstd::cout << \"threshold >> \" << th << std::endl;\\n\\t\\n\\t//cv::imwrite(\"out.jpg\", out);\\n\\tcv::imshow(\"answer\", out);\\n\\tcv::waitKey(0);\\n\\tcv::destroyAllWindows();\\n\\n\\treturn 0;\\n\\n}\\n\\n\\n')])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"30\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"31\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"32\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"33\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"34\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"35\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"36\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"37\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"38\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"39\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"40\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"41\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"42\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"43\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"44\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"45\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"46\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"47\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"48\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"49\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"50\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"51\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"52\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"53\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"54\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"55\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"56\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"57\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"58\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"59\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"60\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"61\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"62\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"63\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"64\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"65\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"66\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"67\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"68\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"69\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"70\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"71\")]),n(\"br\")])]),n(\"p\",[n(\"a\",{attrs:{href:\"https://blog.csdn.net/mutex86/article/details/9169303\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"参考链接\"),n(\"OutboundLink\")],1)])])}),[],!1,null,null,null);s.default=i.exports}}]);","extractedComments":[]}